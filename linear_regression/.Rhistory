temp[[2]]
cat("Average temp", mean(temp[[2]]))
cat("Average temp", mean(temp[[2]]), "\n")
?runif
?round
?rev
r <- rep(runif(15), 2)
r
unlist(r)
r <- list(rep(runif(15), 2),
seq(1,30))
r
unlist(r)
r <- append(r, seq(5, 10, 0.5))
r <- list(rep(runif(15), 2),
seq(1,30))
r <- unlist(r)
r <- append(r, seq(5, 10, 0.5))
sort(r)
?grepl
animals <- c("cat", "moose", "impala", "ant", "kiwi")
grepl(pattern = 'a', x = animals)
grepl(pattern = '^a', animals)
# Matching an 'a' at the end of a string
grepl(pattern = '$a', animals)
grepl(pattern = 'a$', animals)
sub(pattern = 'a', replacement = 'o', x = animals)
gsub(patern = 'a|i', '_', animals)
gsub('a|i', '_', animals)
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
# Use grepl() to match for "edu"
grepl("edu", emails)
# Use grep() to match for "edu", save result to hits
hits <- grep('edu', emails)
# Subset emails using hits
emails[hits]
awards <- c("Won 1 Oscar.",
"Won 1 Oscar. Another 9 wins & 24 nominations.",
"1 win and 2 nominations.",
"2 wins & 3 nominations.",
"Nominated for 2 Golden Globes. 1 more win & 2 nominations.",
"4 wins & 1 nomination.")
sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
sub(".*\\s([0-9]+)\\snomination.*$", "\\3", awards)
sub(".*\\s([0-9]+)\\snomination.*$", "\\2", awards)
sub(".*\\s([0-9]+)\\snomination.*$", "\\4", awards)
sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
grep(".*\\s([0-9]+)\\snomination.*$", awards)
Sy.Date()
Sys.Date()
now
Sys.Time()
Sys.time()
?strptime
install.packages("Hmisc")
library(MASS)
mammals
# Chunk 1: setup
library(ggplot2)
library(Hmisc)
mtcars <- tbl_df(mtcars)
library(dplyr)
mtcars <- tbl_df(mtcars)
mean_sdl(xx, mult = 1)
xx <- 1:100
mean_sdl(xx, mult = 1)
quantile(xx, 1)
?quantile
quantile(xx)
quantile(xx)[2]
median(xx)
mean(xx)
quantile(xx, probs = 0.25)
iris <- tbl_df(iris)
base.plot <- ggplot(iris, aes(Sepal.Length,
Sepal.Width,
col = Species)) +
geom_jitter() +
geom_smooth(method = "lm", se = F)
# Plot base.plot: default aspect ratio
base.plot
# Fix aspect ratio (1:1) of base.plot
base.plot + coord_equal()
tbl_df(iris.wide)
# Code to create the cyl_am col and myCol vector
mtcars$cyl_am <- paste(mtcars$cyl, mtcars$am, sep = "_")
myCol <- rbind(brewer.pal(9, "Blues")[c(3,6,8)],
brewer.pal(9, "Reds")[c(3,6,8)])
# Basic scatter plot, add color scale:
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +
geom_point() +
scale_color_manual(values = myCol)
# Facet according on rows and columns.
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +
geom_point() +
scale_color_manual(values = myCol)+
facet_grid(gear ~ vs)
# Add more variables
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am, size = disp)) +
geom_point() +
scale_color_manual(values = myCol) +
facet_grid(gear ~ vs)
library(RColorBrewer)
# Code to create the cyl_am col and myCol vector
mtcars$cyl_am <- paste(mtcars$cyl, mtcars$am, sep = "_")
myCol <- rbind(brewer.pal(9, "Blues")[c(3,6,8)],
brewer.pal(9, "Reds")[c(3,6,8)])
# Basic scatter plot, add color scale:
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +
geom_point() +
scale_color_manual(values = myCol)
# Facet according on rows and columns.
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +
geom_point() +
scale_color_manual(values = myCol)+
facet_grid(gear ~ vs)
# Add more variables
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am, size = disp)) +
geom_point() +
scale_color_manual(values = myCol) +
facet_grid(gear ~ vs)
library(ggplot)
library(ggplot2)
?theme
str(mtcars)
?labs
# Chunk 1: setup
library(ggplot2)
library(RColorBrewer)
# Chunk 2: hmisc preps
library(dplyr)
library(Hmisc)
mtcars <- tbl_df(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
# Define positions:
posn.d <- position_dodge(width = 0.1)
posn.jd <- position_jitterdodge(jitter.width = 0.1, dodge.width = 0.2)
posn.j <- position_jitter(width = 0.2)
# base layers:
wt.cyl.am <- ggplot(mtcars, aes(cyl,
wt,
col = am,
fill = am,
group = am))
# Chunk 3: variation plot 1
# Plot 1: Jittered, dodged scatter plot with transparent points
wt.cyl.am +
geom_point(position = posn.jd, alpha = 0.6)
# Chunk 4: variation plot 2
# Plot 2: Mean and SD - the easy way
wt.cyl.am +
geom_point(position = posn.jd, alpha = 0.6) +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
position = posn.d)
# Chunk 5: variation plot 3
# Plot 3: Mean and 95% CI - the easy way
wt.cyl.am +
geom_point(position = posn.jd, alpha = 0.6) +
stat_summary(fun.data = mean_cl_normal,
position = posn.d)
# Chunk 6: variation plot 4
# Plot 4: Mean and SD - with T-tipped error bars
wt.cyl.am +
stat_summary(geom = "point", fun.y = mean,
position = posn.d) +
stat_summary(geom = "errorbar", fun.data = mean_sdl,
position = posn.d,
fun.args = list(mult = 1), width = 0.1)
# Chunk 7
xx <- 1:100
# Chunk 8
mean_sdl(xx, mult = 1)
# Chunk 9: custom function plot
# Function to save range for use in ggplot
gg_range <- function(x) {
# Change x below to return the instructed values
data.frame(ymin = min(x), # Min
ymax = max(x)) # Max
}
gg_range(xx)
# Required output:
#   ymin ymax
# 1    1  100
# Function to Custom function:
med_IQR <- function(x) {
# Change x below to return the instructed values
data.frame(y = median(x), # Median
ymin = quantile(x, probs = 0.25), # 1st quartile
ymax = quantile(x, probs = 0.75))  # 3rd quartile
}
med_IQR(xx)
# Required output:
#        y  ymin  ymax
# 25% 50.5 25.75 75.25
# Chunk 10: Final Custom Plot
wt.cyl.am +
stat_summary(geom = "linerange", fun.data = med_IQR,
position = posn.d, size = 3) +
stat_summary(geom = "linerange", fun.data = gg_range,
position = posn.d, size = 3,
alpha = 0.4) +
stat_summary(geom = "point", fun.y = median,
position = posn.d, size = 3,
col = "black", shape = "X")
# Chunk 11: zoom zoom
p <- ggplot(mtcars, aes(x = wt, y = hp, col = am)) + geom_point() + geom_smooth()
# Add scale_x_continuous
p + scale_x_continuous(limits = c(3,6),
expand = c(0,0))
# The proper way to zoom in:
p + coord_cartesian(xlim = c(3,6))
# Chunk 12: default aspect
iris <- tbl_df(iris)
base.plot <- ggplot(iris, aes(Sepal.Length,
Sepal.Width,
col = Species)) +
geom_jitter() +
geom_smooth(method = "lm", se = F)
# Plot base.plot: default aspect ratio
base.plot
# Chunk 13: 1:1 aspect
# Fix aspect ratio (1:1) of base.plot
base.plot + coord_equal()
# Chunk 14: bars to pies
# Create stacked bar plot: thin.bar
thin.bar <- ggplot(mtcars, aes(x = 1, fill = cyl)) +
geom_bar()
# Convert thin.bar to pie chart
thin.bar + coord_polar(theta = "y")
# Create stacked bar plot: wide.bar
wide.bar <- ggplot(mtcars, aes(x = 1, fill = cyl)) +
geom_bar(width = 1)
# Convert wide.bar to pie chart
wide.bar + coord_polar(theta = "y")
# Chunk 15: out of control
# Code to create the cyl_am col and myCol vector
mtcars$cyl_am <- paste(mtcars$cyl, mtcars$am, sep = "_")
myCol <- rbind(brewer.pal(9, "Blues")[c(3,6,8)],
brewer.pal(9, "Reds")[c(3,6,8)])
# Basic scatter plot, add color scale:
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +
geom_point() +
scale_color_manual(values = myCol)
# Facet according on rows and columns.
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am)) +
geom_point() +
scale_color_manual(values = myCol)+
facet_grid(gear ~ vs)
# Add more variables
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl_am, size = disp)) +
geom_point() +
scale_color_manual(values = myCol) +
facet_grid(gear ~ vs)
z2 <- ggplot(mtcars, aes(x = wt/1000, y = mpg, group = factor(cyl), color = factor(cyl))) +
labs(xlab = "Weight (lb/1000)", ylab = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = myCol)
z2
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, group = factor(cyl), color = factor(cyl))) +
labs(xlab = "Weight (lb/1000)", ylab = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = myCol)
z2
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point() +
labs(xlab = "Weight (lb/1000)", ylab = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = myCol)
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point() +
labs(xlab = "Weight (lb/1000)", ylab = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = myCol)
z2
myCol[1]
?brewer.pal
blue <- brewer.pal(3, "Blues")
blue <- brewer.pal(3, "Blues")
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point() +
labs(xlab = "Weight (lb/1000)", ylab = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue)
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point() +
labs(xlab = "Weight (lb/1000)", ylab = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue)
z2
?labs
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point() +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue)
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue)
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6))
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6))
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6), limits = c(0,7))
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6), limits = c(1,7))
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6), limits = c(1,6))
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6), limits = c(1,6)) +
geom_smooth()
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6), limits = c(1,6)) +
geom_smooth(method = 'lm', se = F)
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3, alpha = 0.8) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6), limits = c(1,6)) +
geom_smooth(method = 'lm', se = F)
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3, alpha = 0.94) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6), limits = c(1,6)) +
geom_smooth(method = 'lm', se = F)
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6), limits = c(1,6)) +
geom_smooth(method = 'lm', se = F)
z2
blue <- brewer.pal(9, "Blues")[c(3,6,8)]
z2 <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
geom_point(size = 3) +
labs(x = "Weight (lb/1000)", y = "Miles/(US) Gallon") +
facet_grid(.~cyl) +
scale_color_manual(values = blue) +
scale_x_continuous(breaks = c(2,4,6), limits = c(1,6)) +
geom_smooth(method = 'lm', se = F)
z2
theme_pink <- theme(panel.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
strip.background = element_blank(),
plot.background = element_rect(fill = myPink, color = "black", size = 3),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
strip.text = element_text(size = 16, color = myRed),
axis.title.y = element_text(color = myRed, hjust = 0, face = "italic"),
axis.title.x = element_text(color = myRed, hjust = 0, face = "italic"),
axis.text = element_text(color = "black"),
legend.position = "none")
z2 + theme_pink
myPink <- "#FEE0D2"
myRed <- "#99000D"
theme_pink <- theme(panel.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
strip.background = element_blank(),
plot.background = element_rect(fill = myPink, color = "black", size = 3),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
strip.text = element_text(size = 16, color = myRed),
axis.title.y = element_text(color = myRed, hjust = 0, face = "italic"),
axis.title.x = element_text(color = myRed, hjust = 0, face = "italic"),
axis.text = element_text(color = "black"),
legend.position = "none")
z2 + theme_pink
install.packages('ggthemes')
library(ggthemes)
library(ggthemes)
theme_set(theme_tufte())
z2
# Apply theme_tufte, modified:
z2 + theme_tufte()+ theme(legend.position = c(0.9, 0.9),
legend.title = element_text(face = 'italic',
size = 12),
axis.title = element_text(face = 'bold',
size = 14))
install.packages("plotKML")
install.packages("maptools")
library(maptools)
gpx.raw <- readGPS(i = "gpx", f = "C:/Users/Tomas/Downloads/Settlers_Cabin_Lake_Loop_to_Red_trail_hill_repeats_x10_.gpx")
?update.packages
update.packages(checkBuilt = TRUE, ask = FALSE)
update.packages(checkBuilt = TRUE, ask = FALSE)
library(extrafont)
library(extrafontdb)
setwd("C:/Users/Tomas/OneDrive/School/Springboard/FoundationsDS/in-depth/linear_regression")
states.data <- readRDS("dataSets/states.rds")
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
sat.mod <- lm(csat ~ expense, # regression formula
data=states.data) # data set
sat.voting.mod <-  lm(csat ~ expense + house + senate,
data = na.omit(states.data))
sat.mod <- update(sat.mod, data=na.omit(states.data))
anova(sat.mod, sat.voting.mod)
en.metro.plot <- subset(states.data, select = c("metro", "energy"))
states.en <- lm(energy ~ metro, data = na.omit(states.data))
par(mfrow = c(1, 2))
plot(states.en, which = c(1, 2),
main = "Statistical Model Plots",
bg = "#fdfdfd", col.axis = "#434343", col.main = "#343434",
pch = 16, cex.lab = 0.8, cex.axis = 0.8, cex.main = 1.1,
font.main = 2, family = "Fira Sans", col = "#123e4e")
par(mfrow = c(1,1))
hist(residuals(states.en))
summary(lm(energy ~ metro + csat, data = na.omit(states.data)))
states.en.use <- lm(energy ~ metro + green + toxic, data = na.omit(states.data))
par(mfrow = c(1,2))
plot(states.en.use, which = c(1,2))
plot(states.en.use, which = c(1,2),
main = "Statistical Model Plots",
bg = "#fdfdfd", col.axis = "#434343", col.main = "#343434",
pch = 16, cex.lab = 0.8, cex.axis = 0.8, cex.main = 1.1,
font.main = 2, family = "Fira Sans", col = "#123e4e")
sat.expense.by.percent <- lm(csat ~ expense*income,
data=states.data)
coef(summary(sat.expense.by.percent)) # show regression coefficients table
str(states.data$region)
states.data$region <- factor(states.data$region)
sat.region <- lm(csat ~ region,
data=states.data)
coef(summary(sat.region)) # show regression coefficients table
anova(sat.region) # show ANOVA table
contrasts(states.data$region)
coef(summary(lm(csat ~ C(region, base=4),
data=states.data)))
coef(summary(lm(csat ~ C(region, contr.helmert),
data=states.data)))
str(states.data)
coef(summary(states.en.use))
summary(states.en.use)
?update
summary(update(states.en.use, . ~ . * density))
states.en.inter <- update(states.en.use, . ~ . * density)
contrasts(states.data$region)
summary(update(states.en.use, . ~ . * region))
summary(update(states.en.use, . ~ . * density * region))
summary(states.en.region)
states.en.complex <- update(states.en.use, . ~ . * density * region)
summary(states.en.region)
summary(states.en.complex)
states.en.region <- update(states.en.use, . ~ . * region)
summary(states.en.region)
summary(states.en.complex)
